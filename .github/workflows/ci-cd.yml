# name: The display name of this workflow in the GitHub Actions UI
name: CI/CD

# on: Defines the events that trigger this workflow
on:
  # push: Triggers the workflow when commits are pushed to the repository
  push:
    # branches: Filters the push event to only trigger on specific branches
    branches: [ main ]  # Only run when pushing to the main branch
  # pull_request: Triggers the workflow when a pull request is created or updated
  pull_request:
    # branches: Filters to only run on PRs targeting specific branches
    branches: [ main ]  # Only run on pull requests targeting the main branch

# jobs: Defines one or more jobs that will run as part of this workflow
jobs:
  # build-and-test: The unique identifier for this job
  build-and-test:
    # runs-on: Specifies the type of virtual machine (runner) to execute the job on
    runs-on: ubuntu-latest  # Uses the latest Ubuntu runner provided by GitHub

    # steps: A sequence of tasks that will be executed as part of this job
    steps:
    # uses: Runs a pre-built GitHub Action from the marketplace or a repository
    - uses: actions/checkout@v3  # Checks out the repository code to the runner (clones repo)

    # name: A descriptive label for this step, shown in the GitHub Actions UI
    - name: Set up Python
      # uses: Invokes the setup-python action to install Python on the runner
      uses: actions/setup-python@v4
      # with: Provides input parameters to the action
      with:
        # python-version: Specifies which version of Python to install
        python-version: 3.11  # Installs Python 3.11

    - name: Install dependencies
      # run: Executes shell commands directly on the runner
      run: |
        # Upgrades pip to the latest version
        python -m pip install --upgrade pip
        # Installs all Python packages listed in requirements.txt
        pip install -r requirements.txt

    - name: Run tests
      # run: Executes the test suite
      run: |
        # Uses Python's unittest module to discover and run all tests in the tests directory
        # -m runs a module as a script
        # discover automatically finds test files
        # -s specifies the directory to start discovery
        python -m unittest discover -s tests

    - name: Build Docker image
      # run: Builds a Docker container image from the Dockerfile in the repository root
      run: docker build -t my-app:latest .
      # -t tags the image with the name "my-app" and tag "latest"
      # . specifies the build context (current directory)
  